#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

const BACKEND_URL = process.env.BACKEND_URL || 'http://localhost:8000';
const OPENAPI_URL = `${BACKEND_URL}/api-docs.json`;
const OUTPUT_DIR = path.join(__dirname, '..', 'src', 'types', 'api');

async function generateApiTypes() {
  console.log('üöÄ Starting API type generation...');
  
  try {
    // Ensure output directory exists
    if (!fs.existsSync(OUTPUT_DIR)) {
      fs.mkdirSync(OUTPUT_DIR, { recursive: true });
    }

    console.log(`üì° Fetching OpenAPI spec from: ${OPENAPI_URL}`);
    
    // Generate TypeScript types from OpenAPI spec using openapi-typescript
    console.log('üîß Generating TypeScript types...');
    execSync(`npx openapi-typescript "${OPENAPI_URL}" --output "${path.join(OUTPUT_DIR, 'schema.d.ts')}"`, {
      stdio: 'inherit',
    });

    // Check if client.ts already exists, if not create a basic one
    const clientPath = path.join(OUTPUT_DIR, 'client.ts');
    if (!fs.existsSync(clientPath)) {
      console.log('üõ†Ô∏è  Creating basic API client...');
      const clientContent = `// Auto-generated API client
// DO NOT MODIFY - This file is automatically generated

import { paths } from './schema';

export type ApiPaths = paths;

// Helper types for easier usage
export type LoginRequest = paths['/api/auth/login']['post']['requestBody']['content']['application/json'];
export type LoginResponse = paths['/api/auth/login']['post']['responses']['200']['content']['application/json'];
export type RegisterRequest = paths['/api/auth/register']['post']['requestBody']['content']['application/json'];
export type UserProfileResponse = paths['/api/auth/me']['get']['responses']['200']['content']['application/json'];

// Base API configuration
export const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || process.env.API_URL || 'http://localhost:8000';

// Simple API client class
export class ApiClient {
  private baseUrl: string;
  private token: string | null = null;

  constructor(baseUrl: string = API_BASE_URL) {
    this.baseUrl = baseUrl;
  }

  setAuthToken(token: string) {
    this.token = token;
  }

  private async request<T>(
    endpoint: string,
    options: RequestInit = {}
  ): Promise<T> {
    const url = \`\${this.baseUrl}\${endpoint}\`;
    const headers: Record<string, string> = {
      'Content-Type': 'application/json',
      ...((options.headers as Record<string, string>) || {}),
    };

    if (this.token) {
      headers.Authorization = \`Bearer \${this.token}\`;
    }

    const response = await fetch(url, {
      ...options,
      headers,
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(errorData.message || \`HTTP Error: \${response.status}\`);
    }

    return response.json();
  }

  // Authentication endpoints
  async login(data: LoginRequest): Promise<LoginResponse> {
    return this.request<LoginResponse>('/api/auth/login', {
      method: 'POST',
      body: JSON.stringify(data),
    });
  }

  async register(data: RegisterRequest) {
    return this.request('/api/auth/register', {
      method: 'POST',
      body: JSON.stringify(data),
    });
  }

  async getCurrentUser(): Promise<UserProfileResponse> {
    return this.request<UserProfileResponse>('/api/auth/me');
  }

  // Health check
  async healthCheck() {
    return this.request('/api/health');
  }
}

// Default client instance
export const apiClient = new ApiClient();

// Utility function to create a client with custom base URL
export function createApiClient(baseUrl?: string): ApiClient {
  return new ApiClient(baseUrl);
}`;
      fs.writeFileSync(clientPath, clientContent);
    }

    // Create index file for easy imports
    const indexPath = path.join(OUTPUT_DIR, 'index.ts');
    const indexContent = `// Auto-generated API types and client
// DO NOT MODIFY - This file is automatically generated

export * from './client';
export type { paths, components } from './schema';

// Re-export commonly used types for convenience
export type {
  LoginRequest,
  LoginResponse,
  RegisterRequest,
  UserProfileResponse,
  ApiPaths,
} from './client';`;

    fs.writeFileSync(indexPath, indexContent);

    console.log('‚úÖ API types generated successfully!');
    console.log(`üìÅ Output directory: ${OUTPUT_DIR}`);
    console.log('');
    console.log('üìñ Usage examples:');
    console.log('');
    console.log("import { apiClient, LoginRequest, LoginResponse } from '@my-app/shared/types/api';");
    console.log('');
    console.log('// Set auth token');
    console.log("apiClient.setAuthToken('your-jwt-token');");
    console.log('');
    console.log('// Use the client');
    console.log('const response = await apiClient.login({ email: "user@example.com", password: "password" });');
    console.log('const user = await apiClient.getCurrentUser();');
    
  } catch (error) {
    console.error('‚ùå Error generating API types:', error.message);
    if (error.code) {
      console.error('Error code:', error.code);
    }
    process.exit(1);
  }
}

// Run if called directly
if (require.main === module) {
  generateApiTypes();
}

module.exports = { generateApiTypes };