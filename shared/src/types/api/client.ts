// Auto-generated API client
// DO NOT MODIFY - This file is automatically generated

import { paths } from './schema';

export type ApiPaths = paths;

// Helper types for easier usage
export type LoginRequest = paths['/api/auth/login']['post']['requestBody']['content']['application/json'];
export type LoginResponse = paths['/api/auth/login']['post']['responses']['200']['content']['application/json'];
export type RegisterRequest = paths['/api/auth/register']['post']['requestBody']['content']['application/json'];
export type UserProfileResponse = paths['/api/auth/me']['get']['responses']['200']['content']['application/json'];

// Base API configuration
export const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || process.env.API_URL || 'http://localhost:8000';

// Simple API client class
export class ApiClient {
  private baseUrl: string;
  private token: string | null = null;

  constructor(baseUrl: string = API_BASE_URL) {
    this.baseUrl = baseUrl;
  }

  setAuthToken(token: string) {
    this.token = token;
  }

  private async request<T>(
    endpoint: string,
    options: RequestInit = {}
  ): Promise<T> {
    const url = `${this.baseUrl}${endpoint}`;
    const headers: Record<string, string> = {
      'Content-Type': 'application/json',
      ...((options.headers as Record<string, string>) || {}),
    };

    if (this.token) {
      headers.Authorization = `Bearer ${this.token}`;
    }

    const response = await fetch(url, {
      ...options,
      headers,
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(errorData.message || `HTTP Error: ${response.status}`);
    }

    return response.json();
  }

  // Authentication endpoints
  async login(data: LoginRequest): Promise<LoginResponse> {
    return this.request<LoginResponse>('/api/auth/login', {
      method: 'POST',
      body: JSON.stringify(data),
    });
  }

  async register(data: RegisterRequest) {
    return this.request('/api/auth/register', {
      method: 'POST',
      body: JSON.stringify(data),
    });
  }

  async getCurrentUser(): Promise<UserProfileResponse> {
    return this.request<UserProfileResponse>('/api/auth/me');
  }

  // Health check
  async healthCheck() {
    return this.request('/api/health');
  }
}

// Default client instance
export const apiClient = new ApiClient();

// Utility function to create a client with custom base URL
export function createApiClient(baseUrl?: string): ApiClient {
  return new ApiClient(baseUrl);
}