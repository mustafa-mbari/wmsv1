/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * User login
         * @description Authenticate user with email and password
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["LoginRequest"];
                };
            };
            responses: {
                /** @description Login successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["LoginResponse"];
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                500: components["responses"]["InternalServerError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get current user profile
         * @description Retrieve the profile information of the currently authenticated user
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User profile retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            data?: {
                                user?: components["schemas"]["User"];
                            };
                            /** @example User retrieved successfully */
                            message?: string;
                        };
                    };
                };
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register a new user
         * @description Create a new user account with the provided information
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["RegisterRequest"];
                };
            };
            responses: {
                /** @description User registered successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            data?: {
                                user?: components["schemas"]["User"];
                                /** @description JWT authentication token */
                                token?: string;
                            };
                            /** @example User registered successfully */
                            message?: string;
                        };
                    };
                };
                400: components["responses"]["BadRequest"];
                /** @description Conflict - User already exists */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "success": false,
                         *       "data": null,
                         *       "message": "User with this email or username already exists"
                         *     } */
                        "application/json": components["schemas"]["Error"];
                    };
                };
                500: components["responses"]["InternalServerError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/brands": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all brands
         * @description Retrieve all brands with optional filtering, pagination, and product counts
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Page number for pagination
                     * @example 1
                     */
                    page?: number;
                    /**
                     * @description Number of items per page
                     * @example 10
                     */
                    limit?: number;
                    /**
                     * @description Search in brand name and description
                     * @example apple
                     */
                    search?: string;
                    /**
                     * @description Filter by brand status
                     * @example active
                     */
                    status?: "active" | "inactive" | "all";
                    /**
                     * @description Field to sort by
                     * @example name
                     */
                    sortBy?: "name" | "createdAt" | "updatedAt" | "productCount";
                    /**
                     * @description Sort order
                     * @example asc
                     */
                    sortOrder?: "asc" | "desc";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Brands retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            data?: {
                                brands?: components["schemas"]["Brand"][];
                                pagination?: {
                                    /** @example 1 */
                                    page?: number;
                                    /** @example 10 */
                                    limit?: number;
                                    /** @example 15 */
                                    total?: number;
                                    /** @example 2 */
                                    totalPages?: number;
                                    /** @example true */
                                    hasNextPage?: boolean;
                                    /** @example false */
                                    hasPrevPage?: boolean;
                                };
                            };
                            /** @example Brands retrieved successfully */
                            message?: string;
                        };
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        /**
         * Create new brand
         * @description Create a new brand. Requires admin privileges.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateBrandRequest"];
                };
            };
            responses: {
                /** @description Brand created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            data?: {
                                brand?: components["schemas"]["Brand"];
                            };
                            /** @example Brand created successfully */
                            message?: string;
                        };
                    };
                };
                /** @description Bad request - Invalid input data or validation errors */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "success": false,
                         *       "data": null,
                         *       "message": "Brand name is required"
                         *     } */
                        "application/json": components["schemas"]["Error"];
                    };
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                /** @description Conflict - Brand with same name already exists */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "success": false,
                         *       "data": null,
                         *       "message": "Brand with name 'Apple' already exists"
                         *     } */
                        "application/json": components["schemas"]["Error"];
                    };
                };
                500: components["responses"]["InternalServerError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/brands/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update brand
         * @description Update an existing brand with new information. Requires admin privileges.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Brand unique identifier
                     * @example 1
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateBrandRequest"];
                };
            };
            responses: {
                /** @description Brand updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            data?: {
                                brand?: components["schemas"]["Brand"];
                            };
                            /** @example Brand updated successfully */
                            message?: string;
                        };
                    };
                };
                /** @description Bad request - Invalid input data or validation errors */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "success": false,
                         *       "data": null,
                         *       "message": "Invalid brand data"
                         *     } */
                        "application/json": components["schemas"]["Error"];
                    };
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                /** @description Conflict - Brand with same name already exists */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "success": false,
                         *       "data": null,
                         *       "message": "Brand with this name already exists"
                         *     } */
                        "application/json": components["schemas"]["Error"];
                    };
                };
                500: components["responses"]["InternalServerError"];
            };
        };
        post?: never;
        /**
         * Delete brand
         * @description Soft delete a brand by setting deleted_at timestamp. This action can be reversed. Requires admin privileges.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Brand unique identifier
                     * @example 1
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Brand deleted successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            data?: Record<string, never> | null;
                            /** @example Brand deleted successfully */
                            message?: string;
                        };
                    };
                };
                /** @description Bad request - Invalid brand ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "success": false,
                         *       "data": null,
                         *       "message": "Invalid brand ID"
                         *     } */
                        "application/json": components["schemas"]["Error"];
                    };
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                /** @description Brand not found or already deleted */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "success": false,
                         *       "data": null,
                         *       "message": "Brand not found"
                         *     } */
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Conflict - Brand has associated products */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "success": false,
                         *       "data": null,
                         *       "message": "Cannot delete brand with associated products"
                         *     } */
                        "application/json": components["schemas"]["Error"];
                    };
                };
                500: components["responses"]["InternalServerError"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all categories
         * @description Retrieve all product categories with optional filtering, pagination, and product counts
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Page number for pagination
                     * @example 1
                     */
                    page?: number;
                    /**
                     * @description Number of items per page
                     * @example 10
                     */
                    limit?: number;
                    /**
                     * @description Search in category name and description
                     * @example electronics
                     */
                    search?: string;
                    /**
                     * @description Filter by category status
                     * @example active
                     */
                    status?: "active" | "inactive" | "all";
                    /**
                     * @description Field to sort by
                     * @example name
                     */
                    sortBy?: "name" | "createdAt" | "updatedAt" | "productCount";
                    /**
                     * @description Sort order
                     * @example asc
                     */
                    sortOrder?: "asc" | "desc";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Categories retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            data?: {
                                categories?: components["schemas"]["Category"][];
                                pagination?: {
                                    /** @example 1 */
                                    page?: number;
                                    /** @example 10 */
                                    limit?: number;
                                    /** @example 25 */
                                    total?: number;
                                    /** @example 3 */
                                    totalPages?: number;
                                    /** @example true */
                                    hasNextPage?: boolean;
                                    /** @example false */
                                    hasPrevPage?: boolean;
                                };
                            };
                            /** @example Categories retrieved successfully */
                            message?: string;
                        };
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        /**
         * Create new category
         * @description Create a new product category. Requires admin privileges.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateCategoryRequest"];
                };
            };
            responses: {
                /** @description Category created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            data?: {
                                category?: components["schemas"]["Category"];
                            };
                            /** @example Category created successfully */
                            message?: string;
                        };
                    };
                };
                /** @description Bad request - Invalid input data or validation errors */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "success": false,
                         *       "data": null,
                         *       "message": "Category name is required"
                         *     } */
                        "application/json": components["schemas"]["Error"];
                    };
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                /** @description Conflict - Category with same name already exists */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "success": false,
                         *       "data": null,
                         *       "message": "Category with name 'Electronics' already exists"
                         *     } */
                        "application/json": components["schemas"]["Error"];
                    };
                };
                500: components["responses"]["InternalServerError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/categories/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update category
         * @description Update an existing category with new information. Requires admin privileges.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Category unique identifier
                     * @example 1
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateCategoryRequest"];
                };
            };
            responses: {
                /** @description Category updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            data?: {
                                category?: components["schemas"]["Category"];
                            };
                            /** @example Category updated successfully */
                            message?: string;
                        };
                    };
                };
                /** @description Bad request - Invalid input data or validation errors */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "success": false,
                         *       "data": null,
                         *       "message": "Invalid category data"
                         *     } */
                        "application/json": components["schemas"]["Error"];
                    };
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                /** @description Conflict - Category with same name already exists */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "success": false,
                         *       "data": null,
                         *       "message": "Category with this name already exists"
                         *     } */
                        "application/json": components["schemas"]["Error"];
                    };
                };
                500: components["responses"]["InternalServerError"];
            };
        };
        post?: never;
        /**
         * Delete category
         * @description Soft delete a category by setting deleted_at timestamp. This action can be reversed. Requires admin privileges.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Category unique identifier
                     * @example 1
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Category deleted successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            data?: Record<string, never> | null;
                            /** @example Category deleted successfully */
                            message?: string;
                        };
                    };
                };
                /** @description Bad request - Invalid category ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "success": false,
                         *       "data": null,
                         *       "message": "Invalid category ID"
                         *     } */
                        "application/json": components["schemas"]["Error"];
                    };
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                /** @description Category not found or already deleted */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "success": false,
                         *       "data": null,
                         *       "message": "Category not found"
                         *     } */
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Conflict - Category has associated products */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "success": false,
                         *       "data": null,
                         *       "message": "Cannot delete category with associated products"
                         *     } */
                        "application/json": components["schemas"]["Error"];
                    };
                };
                500: components["responses"]["InternalServerError"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all products
         * @description Retrieve all products with optional filtering, pagination, and related data (categories, brands, families, units)
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Page number for pagination
                     * @example 1
                     */
                    page?: number;
                    /**
                     * @description Number of items per page
                     * @example 10
                     */
                    limit?: number;
                    /**
                     * @description Search in product name, SKU, or description
                     * @example coffee
                     */
                    search?: string;
                    /**
                     * @description Filter by category ID
                     * @example 5
                     */
                    categoryId?: string;
                    /**
                     * @description Filter by brand ID
                     * @example 2
                     */
                    brandId?: string;
                    /**
                     * @description Filter by product status
                     * @example active
                     */
                    status?: "active" | "inactive" | "all";
                    /**
                     * @description Field to sort by
                     * @example name
                     */
                    sortBy?: "name" | "sku" | "price" | "createdAt" | "updatedAt";
                    /**
                     * @description Sort order
                     * @example asc
                     */
                    sortOrder?: "asc" | "desc";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Products retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            data?: {
                                products?: components["schemas"]["Product"][];
                                pagination?: {
                                    /** @example 1 */
                                    page?: number;
                                    /** @example 10 */
                                    limit?: number;
                                    /** @example 50 */
                                    total?: number;
                                    /** @example 5 */
                                    totalPages?: number;
                                    /** @example true */
                                    hasNextPage?: boolean;
                                    /** @example false */
                                    hasPrevPage?: boolean;
                                };
                            };
                            /** @example Products retrieved successfully */
                            message?: string;
                        };
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        /**
         * Create new product
         * @description Create a new product with the provided information. Requires admin privileges.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateProductRequest"];
                };
            };
            responses: {
                /** @description Product created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            data?: {
                                product?: components["schemas"]["Product"];
                            };
                            /** @example Product created successfully */
                            message?: string;
                        };
                    };
                };
                /** @description Bad request - Invalid input data or validation errors */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "success": false,
                         *       "data": null,
                         *       "message": "Product name is required"
                         *     } */
                        "application/json": components["schemas"]["Error"];
                    };
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                /** @description Conflict - Product with same SKU already exists */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "success": false,
                         *       "data": null,
                         *       "message": "Product with SKU 'COFFEE-001' already exists"
                         *     } */
                        "application/json": components["schemas"]["Error"];
                    };
                };
                500: components["responses"]["InternalServerError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/products/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update product
         * @description Update an existing product with new information. Requires admin privileges.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Product unique identifier
                     * @example 1
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateProductRequest"];
                };
            };
            responses: {
                /** @description Product updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            data?: {
                                product?: components["schemas"]["Product"];
                            };
                            /** @example Product updated successfully */
                            message?: string;
                        };
                    };
                };
                /** @description Bad request - Invalid input data or validation errors */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "success": false,
                         *       "data": null,
                         *       "message": "Invalid product data"
                         *     } */
                        "application/json": components["schemas"]["Error"];
                    };
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                /** @description Conflict - Product with same SKU already exists */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "success": false,
                         *       "data": null,
                         *       "message": "Product with this SKU already exists"
                         *     } */
                        "application/json": components["schemas"]["Error"];
                    };
                };
                500: components["responses"]["InternalServerError"];
            };
        };
        post?: never;
        /**
         * Delete product
         * @description Soft delete a product by setting deleted_at timestamp. This action can be reversed. Requires admin privileges.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Product unique identifier
                     * @example 1
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Product deleted successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            data?: Record<string, never> | null;
                            /** @example Product deleted successfully */
                            message?: string;
                        };
                    };
                };
                /** @description Bad request - Invalid product ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "success": false,
                         *       "data": null,
                         *       "message": "Invalid product ID"
                         *     } */
                        "application/json": components["schemas"]["Error"];
                    };
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                /** @description Product not found or already deleted */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "success": false,
                         *       "data": null,
                         *       "message": "Product not found"
                         *     } */
                        "application/json": components["schemas"]["Error"];
                    };
                };
                500: components["responses"]["InternalServerError"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all users
         * @description Retrieve a paginated list of users with optional filtering and sorting
         */
        get: {
            parameters: {
                query?: {
                    /** @description Page number for pagination */
                    page?: number;
                    /** @description Number of items per page */
                    limit?: number;
                    /**
                     * @description Search in username, email, firstName, lastName
                     * @example john
                     */
                    search?: string;
                    /**
                     * @description Filter by user role
                     * @example admin
                     */
                    role?: string;
                    /** @description Filter by user status */
                    status?: "active" | "inactive" | "all";
                    /** @description Field to sort by */
                    sortBy?: "firstName" | "lastName" | "email" | "createdAt" | "updatedAt";
                    /** @description Sort order */
                    sortOrder?: "asc" | "desc";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Users retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            data?: {
                                users?: components["schemas"]["User"][];
                                pagination?: {
                                    /** @example 1 */
                                    page?: number;
                                    /** @example 10 */
                                    limit?: number;
                                    /** @example 100 */
                                    total?: number;
                                    /** @example 10 */
                                    totalPages?: number;
                                    /** @example true */
                                    hasNextPage?: boolean;
                                    /** @example false */
                                    hasPrevPage?: boolean;
                                };
                            };
                            /** @example Users retrieved successfully */
                            message?: string;
                        };
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        /**
         * Create new user
         * @description Create a new user account with the provided information. Requires admin privileges.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateUserRequest"];
                };
            };
            responses: {
                /** @description User created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            data?: {
                                user?: components["schemas"]["User"];
                            };
                            /** @example User created successfully */
                            message?: string;
                        };
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                /** @description Conflict - User already exists */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "success": false,
                         *       "data": null,
                         *       "message": "User with this email or username already exists"
                         *     } */
                        "application/json": components["schemas"]["Error"];
                    };
                };
                500: components["responses"]["InternalServerError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user by ID
         * @description Retrieve a specific user by their unique identifier
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description User unique identifier
                     * @example 123
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            data?: {
                                user?: components["schemas"]["User"];
                            };
                            /** @example User retrieved successfully */
                            message?: string;
                        };
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalServerError"];
            };
        };
        /**
         * Update user
         * @description Update an existing user with new information. Requires admin privileges.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description User unique identifier
                     * @example 123
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateUserRequest"];
                };
            };
            responses: {
                /** @description User updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            data?: {
                                user?: components["schemas"]["User"];
                            };
                            /** @example User updated successfully */
                            message?: string;
                        };
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                /** @description Conflict - Username or email already exists */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "success": false,
                         *       "data": null,
                         *       "message": "Username or email already exists"
                         *     } */
                        "application/json": components["schemas"]["Error"];
                    };
                };
                500: components["responses"]["InternalServerError"];
            };
        };
        post?: never;
        /**
         * Delete user
         * @description Permanently delete a user from the system. This action cannot be undone. Requires super admin privileges.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description User unique identifier
                     * @example 123
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User deleted successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            data?: Record<string, never>;
                            /** @example User deleted successfully */
                            message?: string;
                        };
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalServerError"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{id}/avatar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload user avatar
         * @description Upload an avatar image for a specific user. Accepts JPEG and PNG files up to 5MB. Requires admin privileges.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description User unique identifier
                     * @example 123
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "multipart/form-data": {
                        /**
                         * Format: binary
                         * @description Avatar image file (JPEG/PNG, max 5MB)
                         */
                        avatar: string;
                    };
                };
            };
            responses: {
                /** @description Avatar uploaded successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            data?: {
                                /**
                                 * @description URL of the uploaded avatar
                                 * @example /uploads/avatars/avatar-123-1640995200000-123456789.jpg
                                 */
                                avatarUrl?: string;
                                user?: components["schemas"]["User"];
                            };
                            /** @example Avatar uploaded successfully */
                            message?: string;
                        };
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                /** @description File too large */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "success": false,
                         *       "data": null,
                         *       "message": "File size exceeds maximum limit of 5MB"
                         *     } */
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Unsupported media type */
                415: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "success": false,
                         *       "data": null,
                         *       "message": "Only JPEG and PNG files are allowed"
                         *     } */
                        "application/json": components["schemas"]["Error"];
                    };
                };
                500: components["responses"]["InternalServerError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{id}/password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Change user password
         * @description Change a user's password with current password verification. Requires admin privileges.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description User unique identifier
                     * @example 123
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: password
                         * @description Current user password for verification
                         * @example currentPass123
                         */
                        currentPassword: string;
                        /**
                         * Format: password
                         * @description New password (minimum 6 characters)
                         * @example newPassword123
                         */
                        password: string;
                    };
                };
            };
            responses: {
                /** @description Password changed successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            data?: {
                                /** @example Password changed successfully */
                                message?: string;
                            };
                            /** @example Password changed successfully */
                            message?: string;
                        };
                    };
                };
                /** @description Bad request - Missing required fields or validation errors */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "success": false,
                         *       "data": null,
                         *       "message": "Current password and new password are required"
                         *     } */
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Invalid current password */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "success": false,
                         *       "data": null,
                         *       "message": "Current password is incorrect"
                         *     } */
                        "application/json": components["schemas"]["Error"];
                    };
                };
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalServerError"];
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ApiResponse: {
            /** @description Indicates if the request was successful */
            success: boolean;
            /** @description Response data */
            data?: Record<string, never> | null;
            /** @description Response message */
            message?: string | null;
            /** @description Error message if request failed */
            error?: string | null;
        };
        User: {
            /**
             * @description User unique identifier
             * @example 123
             */
            id: string;
            /**
             * Format: email
             * @description User email address
             * @example john.doe@example.com
             */
            email: string;
            /**
             * @description User first name
             * @example John
             */
            firstName: string;
            /**
             * @description User last name
             * @example Doe
             */
            lastName: string;
            /**
             * @description User role
             * @enum {string}
             */
            role?: "ADMIN" | "USER" | "MANAGER";
            /**
             * @description User account status
             * @example true
             */
            isActive?: boolean;
            /**
             * Format: date-time
             * @description Account creation date
             * @example 2023-01-01T00:00:00Z
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description Last update date
             * @example 2023-01-01T12:00:00Z
             */
            updatedAt?: string;
            /**
             * @description Unique username
             * @example johndoe
             */
            username: string;
            /**
             * @description User phone number
             * @example +1234567890
             */
            phone?: string | null;
            /**
             * @description User address
             * @example 123 Main St, City, State
             */
            address?: string | null;
            /**
             * @description User avatar image URL
             * @example /uploads/avatars/avatar-123.jpg
             */
            avatarUrl?: string | null;
            /**
             * @description User roles
             * @example [
             *       "admin",
             *       "manager"
             *     ]
             */
            roleNames?: string[];
        };
        Product: {
            /**
             * @description Product unique identifier
             * @example 1
             */
            id: string;
            /**
             * @description Product name
             * @example Premium Coffee Beans
             */
            name: string;
            /**
             * @description Product description
             * @example High-quality arabica coffee beans from Colombia
             */
            description?: string | null;
            /**
             * @description Stock Keeping Unit - unique product identifier
             * @example COFFEE-001
             */
            sku: string;
            /**
             * Format: decimal
             * @description Product price in decimal format
             * @example 24.99
             */
            price: number;
            /**
             * @description Associated category ID
             * @example 5
             */
            categoryId?: string | null;
            /**
             * @description Associated family ID
             * @example 3
             */
            familyId?: string | null;
            /**
             * @description Associated brand ID
             * @example 2
             */
            brandId?: string | null;
            /**
             * @description Associated unit ID
             * @example 1
             */
            unitId?: string | null;
            /**
             * @description Product active status
             * @default true
             * @example true
             */
            isActive: boolean;
            /**
             * Format: date-time
             * @description Product creation timestamp
             * @example 2023-01-01T00:00:00Z
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description Last update timestamp
             * @example 2023-01-01T12:00:00Z
             */
            updatedAt?: string;
            /** @description Associated category details */
            category?: components["schemas"]["Category"];
            /** @description Associated family details */
            family?: Record<string, never> | null;
            /** @description Associated brand details */
            brand?: components["schemas"]["Brand"];
            /** @description Associated unit details */
            unit?: Record<string, never> | null;
        };
        Category: {
            /**
             * @description Category unique identifier
             * @example 1
             */
            id: string;
            /**
             * @description Category name
             * @example Electronics
             */
            name: string;
            /**
             * @description Category description
             * @example Electronic devices and accessories
             */
            description?: string | null;
            /**
             * @description Category active status
             * @default true
             * @example true
             */
            isActive: boolean;
            /**
             * Format: date-time
             * @description Category creation timestamp
             * @example 2023-01-01T00:00:00Z
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description Last update timestamp
             * @example 2023-01-01T12:00:00Z
             */
            updatedAt?: string;
            /**
             * @description Number of products in this category
             * @example 25
             */
            productCount?: number;
        };
        Brand: {
            /**
             * @description Brand unique identifier
             * @example 1
             */
            id: string;
            /**
             * @description Brand name
             * @example Apple
             */
            name: string;
            /**
             * @description Brand description
             * @example Premium technology and electronics brand
             */
            description?: string | null;
            /**
             * @description Brand active status
             * @default true
             * @example true
             */
            isActive: boolean;
            /**
             * Format: date-time
             * @description Brand creation timestamp
             * @example 2023-01-01T00:00:00Z
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description Last update timestamp
             * @example 2023-01-01T12:00:00Z
             */
            updatedAt?: string;
            /**
             * @description Number of products from this brand
             * @example 15
             */
            productCount?: number;
        };
        Error: {
            /** @example false */
            success: boolean;
            data?: null | null;
            /** @description Error message */
            message: string;
            /** @description Detailed error information */
            error?: string | null;
        };
        LoginRequest: {
            /**
             * Format: email
             * @description User email address
             * @example admin@wms.com
             */
            email: string;
            /**
             * Format: password
             * @description User password (minimum 6 characters)
             * @example admin123
             */
            password: string;
        };
        LoginResponse: {
            /** @example true */
            success?: boolean;
            data?: {
                user?: {
                    /** @description User unique identifier */
                    id?: string;
                    /**
                     * Format: email
                     * @description User email address
                     */
                    email?: string;
                    /** @description Username */
                    username?: string;
                    /** @description Full name */
                    name?: string;
                    /** @description First name */
                    first_name?: string;
                    /** @description Last name */
                    last_name?: string;
                    /** @description Profile picture URL */
                    profilePicture?: string | null;
                    /** @description Account status */
                    is_active?: boolean;
                    /** @description User roles */
                    role_names?: string[];
                    /** Format: date-time */
                    created_at?: string;
                    /** Format: date-time */
                    updated_at?: string;
                };
                /** @description JWT authentication token */
                token?: string;
            };
            /** @example Login successful */
            message?: string;
        };
        RegisterRequest: {
            /**
             * @description Unique username
             * @example johndoe
             */
            username: string;
            /**
             * Format: email
             * @description User email address
             * @example john@example.com
             */
            email: string;
            /**
             * @description First name
             * @example John
             */
            firstName: string;
            /**
             * @description Last name
             * @example Doe
             */
            lastName: string;
            /**
             * @description Phone number
             * @example +1234567890
             */
            phone?: string | null;
            /**
             * @description Address
             * @example 123 Main St, City, State
             */
            address?: string | null;
            /**
             * Format: password
             * @description Password (minimum 6 characters)
             * @example password123
             */
            password: string;
            /**
             * @description Account status
             * @default true
             * @example true
             */
            isActive: boolean;
            /**
             * @description Admin privileges
             * @default false
             * @example false
             */
            isAdmin: boolean;
        };
        CreateBrandRequest: {
            /**
             * @description Brand name
             * @example Apple
             */
            name: string;
            /**
             * @description Brand description
             * @example Premium technology and electronics brand
             */
            description?: string | null;
            /**
             * @description Brand active status
             * @default true
             * @example true
             */
            isActive: boolean;
        };
        UpdateBrandRequest: {
            /**
             * @description Brand name
             * @example Apple
             */
            name?: string;
            /**
             * @description Brand description
             * @example Premium technology and electronics brand
             */
            description?: string | null;
            /**
             * @description Brand active status
             * @example true
             */
            isActive?: boolean;
        };
        CreateCategoryRequest: {
            /**
             * @description Category name
             * @example Electronics
             */
            name: string;
            /**
             * @description Category description
             * @example Electronic devices and accessories
             */
            description?: string | null;
            /**
             * @description Category active status
             * @default true
             * @example true
             */
            isActive: boolean;
        };
        UpdateCategoryRequest: {
            /**
             * @description Category name
             * @example Electronics
             */
            name?: string;
            /**
             * @description Category description
             * @example Electronic devices and accessories
             */
            description?: string | null;
            /**
             * @description Category active status
             * @example true
             */
            isActive?: boolean;
        };
        CreateProductRequest: {
            /**
             * @description Product name
             * @example Premium Coffee Beans
             */
            name: string;
            /**
             * @description Product description
             * @example High-quality arabica coffee beans from Colombia
             */
            description?: string | null;
            /**
             * @description Stock Keeping Unit - unique product identifier
             * @example COFFEE-001
             */
            sku: string;
            /**
             * Format: decimal
             * @description Product price in decimal format
             * @example 24.99
             */
            price: number;
            /**
             * @description Associated category ID
             * @example 5
             */
            categoryId?: string | null;
            /**
             * @description Associated family ID
             * @example 3
             */
            familyId?: string | null;
            /**
             * @description Associated brand ID
             * @example 2
             */
            brandId?: string | null;
            /**
             * @description Associated unit ID
             * @example 1
             */
            unitId?: string | null;
            /**
             * @description Product active status
             * @default true
             * @example true
             */
            isActive: boolean;
        };
        UpdateProductRequest: {
            /**
             * @description Product name
             * @example Premium Coffee Beans
             */
            name?: string;
            /**
             * @description Product description
             * @example High-quality arabica coffee beans from Colombia
             */
            description?: string | null;
            /**
             * Format: decimal
             * @description Product price in decimal format
             * @example 24.99
             */
            price?: number;
            /**
             * @description Associated category ID
             * @example 5
             */
            categoryId?: string | null;
            /**
             * @description Associated family ID
             * @example 3
             */
            familyId?: string | null;
            /**
             * @description Associated brand ID
             * @example 2
             */
            brandId?: string | null;
            /**
             * @description Associated unit ID
             * @example 1
             */
            unitId?: string | null;
            /**
             * @description Product active status
             * @example true
             */
            isActive?: boolean;
        };
        CreateUserRequest: {
            /**
             * Format: email
             * @description User email address
             * @example john.doe@example.com
             */
            email: string;
            /**
             * @description Unique username
             * @example johndoe
             */
            username: string;
            /**
             * @description User first name
             * @example John
             */
            firstName: string;
            /**
             * @description User last name
             * @example Doe
             */
            lastName: string;
            /**
             * @description User phone number
             * @example +1234567890
             */
            phone?: string | null;
            /**
             * @description User address
             * @example 123 Main St, City, State
             */
            address?: string | null;
            /**
             * Format: password
             * @description User password (minimum 6 characters)
             * @example securepassword123
             */
            password: string;
            /**
             * @description User account status
             * @default true
             * @example true
             */
            isActive: boolean;
        };
        UpdateUserRequest: {
            /**
             * @description User first name
             * @example John
             */
            firstName?: string;
            /**
             * @description User last name
             * @example Doe
             */
            lastName?: string;
            /**
             * @description User phone number
             * @example +1234567890
             */
            phone?: string | null;
            /**
             * @description User address
             * @example 123 Main St, City, State
             */
            address?: string | null;
            /**
             * @description User account status
             * @example true
             */
            isActive?: boolean;
        };
    };
    responses: {
        /** @description Successful operation */
        Success: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ApiResponse"];
            };
        };
        /** @description Bad request */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "success": false,
                 *       "data": null,
                 *       "message": "Bad request",
                 *       "error": "Invalid input data"
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Unauthorized access */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "success": false,
                 *       "data": null,
                 *       "message": "Unauthorized",
                 *       "error": "Authentication required"
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Forbidden access */
        Forbidden: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "success": false,
                 *       "data": null,
                 *       "message": "Forbidden",
                 *       "error": "Insufficient permissions"
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Resource not found */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "success": false,
                 *       "data": null,
                 *       "message": "Not found",
                 *       "error": "Resource not found"
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Internal server error */
        InternalServerError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "success": false,
                 *       "data": null,
                 *       "message": "Internal server error",
                 *       "error": "An unexpected error occurred"
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
